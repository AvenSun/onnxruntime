parameters:
  DoEsrp: 'false'
  PackageName: 'Microsoft.ML.OnnxRuntime.TensorRT'

jobs:
- template: ../../templates/win-ci-2019.yml
  parameters:
    AgentPool : 'onnxruntime-gpu-winbuild'
    ArtifactName: 'drop-nuget'
    JobName: 'Windows_CI_GPU_TRT_Dev'
    BuildCommand: --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_shared_lib --enable_onnx_tests --cmake_generator "Visual Studio 16 2019" --use_cuda --cuda_version=11.1 --cuda_home="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1" --cudnn_home="C:\local\cudnn-11.1-windows-x64-v8.0.5.39\cuda" --use_tensorrt --tensorrt_home="C:\local\TensorRT-7.2.2.3"
    BuildArch: 'x64'
    msbuildArchitecture: 'amd64'
    EnvSetupScript: 'setup_env_cuda_11.bat'
    sln_platform: 'x64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    CudaVersion: '11.1'
    OrtPackageId: 'Microsoft.ML.OnnxRuntime.TensorRT'
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreatePackage /p:OrtPackageId=Microsoft.ML.OnnxRuntime.TensorRT
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)
     mkdir $(Build.ArtifactStagingDirectory)\testdata
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\custom_op_library.* $(Build.ArtifactStagingDirectory)\testdata
