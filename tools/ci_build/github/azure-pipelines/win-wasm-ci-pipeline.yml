jobs:
# - job: build_WASM
#   pool: 'Win-CPU-2019'
#   strategy:
#     maxParallel: 4
#     matrix:
#       'debug':
#         BuildConfig: 'Debug'
#         CmdParams: ''
#         WasmFileName: 'onnxruntime_wasm'
#       'release':
#         BuildConfig: 'Release'
#         CmdParams: ''
#         WasmFileName: 'onnxruntime_wasm'
#       'threads debug':
#         BuildConfig: 'Debug'
#         CmdParams: '--enable_wasm_threads'
#         WasmFileName: 'onnxruntime_wasm_threads'
#       'threads release':
#         BuildConfig: 'Release'
#         CmdParams: '--enable_wasm_threads'
#         WasmFileName: 'onnxruntime_wasm_threads'
      
#   variables:
#     OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
#     EnvSetupScript: setup_env.bat
#     buildArch: x64
#   timeoutInMinutes: 120
#   workspace:
#     clean: all
#   steps:    
#   - task: UsePythonVersion@0
#     inputs: 
#       versionSpec: '3.7' 
#       addToPath: true 
#       architecture: $(buildArch)

#   - task: NodeTool@0
#     inputs:
#       versionSpec: '14.x'

#   - task: BatchScript@1
#     displayName: 'setup env'
#     inputs:
#       filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
#       modifyEnvironment: true
#       workingFolder: '$(Build.BinariesDirectory)'

#   - script: |
#      python -m pip install -q pyopenssl setuptools wheel numpy ninja flake8
#     workingDirectory: '$(Build.BinariesDirectory)'
#     displayName: 'Install python modules'

#   - task: PythonScript@0
#     displayName: 'Build and test'
#     inputs:
#       scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
#       arguments: '--config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --build_wasm --cmake_generator "Visual Studio 16 2019" $(CmdParams)'
#       workingDirectory: '$(Build.BinariesDirectory)'

#   - script: |
#       copy $(Build.BinariesDirectory)\$(BuildConfig)\$(WasmFileName)*.* $(Build.ArtifactStagingDirectory)
#     displayName: 'Create Artifacts'

#   - task: PublishPipelineArtifact@0
#     displayName: 'Publish Pipeline Artifact'
#     inputs:
#       artifactName: '$(BuildConfig)_$(WasmFileName)'
#       targetPath: '$(Build.ArtifactStagingDirectory)'

#   - task: PublishTestResults@2
#     displayName: 'Publish unit test results'
#     inputs:
#       testResultsFiles: '**/*.results.xml'
#       searchFolder: '$(Build.BinariesDirectory)'
#       testRunTitle: 'Unit Test Run'
#     condition: succeededOrFailed()

#   - template: templates/component-governance-component-detection-steps.yml
#     parameters :
#       condition : 'succeeded'

#   - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
#     displayName: 'Clean Agent Directories'
#     condition: always()
- job: build_onnxruntime_web
  # dependsOn: build_WASM
  pool: 'yulongw-test'
  timeoutInMinutes: 120
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: false
    fetchDepth: 1
  - script: |
     git submodule sync -- cmake\external\onnx
     git submodule update --init -- cmake\external\onnx
    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'Checkout submodule onnx'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: 'onnxruntime'
      pipeline: 161
      runVersion: 'specific'
      runId: 369965
      patterns: 'Release_*/**/*'
      path: $(Pipeline.Workspace)\artifacts
    displayName: 'Download WebAssembly artifacts'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)\artifacts
      contents: |
        **\*.wasm
        **\*.worker.js
      targetFolder: $(Build.SourcesDirectory)\js\web\dist
      flattenFolders: true
    displayName: 'Binplace dist files'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)\artifacts
      contents: |
        **\*.js
        !**\*.worker.js
      targetFolder: $(Build.SourcesDirectory)\js\web\lib\wasm\binding
      flattenFolders: true
    displayName: 'Binplace js files'
  - script: |
     npm ci
    workingDirectory: '$(Build.SourcesDirectory)\js'
    displayName: 'npm ci /js/'
  - script: |
     npm ci
    workingDirectory: '$(Build.SourcesDirectory)\js\common'
    displayName: 'npm ci /js/common/'
  - script: |
     npm ci
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'npm ci /js/web/'
  - script: |
     npm run lint
    workingDirectory: '$(Build.SourcesDirectory)\js'
    displayName: 'ESLint'
  - script: |
     npm run format
    workingDirectory: '$(Build.SourcesDirectory)\js'
    displayName: 'Clang-format'
  - script: |
     node -e "a=require('child_process').execSync('git ls-files -m').toString();if(a)throw new Error('Following source files are not formatted:\n'+a)"
    workingDirectory: '$(Build.SourcesDirectory)\js'
    displayName: 'Check unformatted files'
  - script: |
     npm run build
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'Build ort-web'
  - script: |
     npm test -- --file-cache
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'Run ort-web tests'
  - script: |
     npm pack
    workingDirectory: '$(Build.SourcesDirectory)\js\web'
    displayName: 'Generate NPM package'
  - script: |
      copy $(Build.SourcesDirectory)\js\web\onnxruntime-web-*.tgz $(Build.ArtifactStagingDirectory)
    displayName: 'Create Artifacts'
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline Artifact'
    inputs:
      artifactName: 'onnxruntime-web'
      targetPath: '$(Build.ArtifactStagingDirectory)'
